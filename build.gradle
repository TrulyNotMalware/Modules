buildscript{
    ext{
        springBootVersion = '3.2.0'
        oracleVersionDependency = '21.11.0.0'
    }
    repositories{
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.1.4"
    }
}

allprojects {
    group = "dev.notypie"
    version = '0.0.1'
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'java-test-fixtures'

    sourceCompatibility = '21'

    ext{
        set('springCloudVersion',"2023.0.0")
    }

    repositories {
        mavenCentral()
    }

    tasks.named('test', Test){
        useJUnitPlatform()
    }

    dependencyManagement{
        imports {
//            mavenBom "com.oracle.database.jdbc:ojdbc-bom:${oracleVersionDependency}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'

        //Devtools
        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        //[Manage]Actuator
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        //Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testFixturesImplementation 'org.springframework.boot:spring-boot-starter-test'

    }
    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
        sourceSets*.resources.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
    }
}
